     1                                  ; Filename: project.asm
     2                                  ; GLOBALS
     3                                  global _start ; Declared for linker, this is declaring _start (entry point)
     4                                  
     5                                  ; TEXT SECTION
     6                                  section .text
     7                                  _start:
     8                                      ; Print "Enter First Number: "
     9 00000000 BA15000000                  mov     rdx,    prompt1_length  ; message length
    10 00000005 48BE-                       mov     rsi,    prompt1         ; message address
    10 00000007 [0000000000000000] 
    11 0000000F BF01000000                  mov     rdi,    1               ; file descriptor (stdout)
    12 00000014 B801000000                  mov     rax,    1               ; system call number (sys_write)
    13 00000019 0F05                        syscall                         ; call kernel
    14                                  
    15                                      ; Read first number
    16 0000001B 48BE-                       mov     rsi,    num1            ; address to store input
    16 0000001D [0000000000000000] 
    17 00000025 BF00000000                  mov     rdi,    0               ; file descriptor (stdin)
    18 0000002A B800000000                  mov     rax,    0               ; system call number (sys_read)
    19 0000002F 0F05                        syscall                         ; call kernel
    20                                  
    21                                      ; Print "Enter Second Number: "
    22 00000031 BA16000000                  mov     rdx,    prompt2_length  ; message length
    23 00000036 48BE-                       mov     rsi,    prompt2         ; message address
    23 00000038 [1500000000000000] 
    24 00000040 BF01000000                  mov     rdi,    1               ; file descriptor (stdout)
    25 00000045 B801000000                  mov     rax,    1               ; system call number (sys_write)
    26 0000004A 0F05                        syscall                         ; call kernel
    27                                  
    28                                      ; Read second number
    29 0000004C 48BE-                       mov     rsi,    num2            ; address to store input
    29 0000004E [4000000000000000] 
    30 00000056 BF00000000                  mov     rdi,    0               ; file descriptor (stdin)
    31 0000005B B800000000                  mov     rax,    0               ; system call number (sys_read)
    32 00000060 0F05                        syscall                         ; call kernel
    33                                  
    34                                      ; Convert ASCII input to integer for first number
    35 00000062 4831D2                      xor     rdx,    rdx             ; clear rdx for later use
    36 00000065 48BE-                       mov     rsi,    num1            ; pointer to the string
    36 00000067 [0000000000000000] 
    37 0000006F E858000000                  call    atoi                    ; convert ASCII to integer
    38 00000074 4989C0                      mov     r8,     rax             ; store the result in r8
    39                                  
    40                                      ; Convert ASCII input to integer for second number
    41 00000077 4831D2                      xor     rdx,    rdx             ; clear rdx for later use
    42 0000007A 48BE-                       mov     rsi,    num2            ; pointer to the string
    42 0000007C [4000000000000000] 
    43 00000084 E843000000                  call    atoi                    ; convert ASCII to integer
    44                                  
    45                                      ; Add the two numbers
    46 00000089 4C01C0                      add     rax,    r8              ; add first number to second number
    47                                  
    48                                      ; Print the result
    49 0000008C BA0C000000                  mov     rdx,    result_msg_len  ; length of the result message
    50 00000091 48BE-                       mov     rsi,    result_msg      ; address of the result message
    50 00000093 [2B00000000000000] 
    51 0000009B BF01000000                  mov     rdi,    1               ; file descriptor (stdout)
    52 000000A0 B801000000                  mov     rax,    1               ; system call number (sys_write)
    53 000000A5 0F05                        syscall                         ; call kernel
    54                                  
    55                                      ; Print the result of addition
    56 000000A7 BA40000000                  mov     rdx,    64              ; length of the result
    57 000000AC 48BE-                       mov     rsi,    result          ; address of the result
    57 000000AE [8000000000000000] 
    58 000000B6 BF01000000                  mov     rdi,    1               ; file descriptor (stdout)
    59 000000BB B801000000                  mov     rax,    1               ; system call number (sys_write)
    60 000000C0 0F05                        syscall                         ; call kernel
    61                                  
    62                                      ; Exit
    63 000000C2 B83C000000                  mov     rax,    60              ; system call number (sys_exit)
    64 000000C7 4831FF                      xor     rdi,    rdi             ; return status
    65 000000CA 0F05                        syscall                         ; call kernel
    66                                  
    67                                  ; Function to convert ASCII to integer
    68                                  ; Input: rsi - address of the string
    69                                  ; Output: rax - integer value
    70                                  atoi:
    71 000000CC 4831C0                      xor     rax,    rax             ; Clear rax
    72                                  .loop:
    73 000000CF AC                          lodsb                           ; Load byte into al from address in rsi and increment rsi
    74 000000D0 3C00                        cmp     al,     0               ; Check for null terminator
    75 000000D2 740B                        je      .done                   ; If null terminator found, we are done
    76 000000D4 2C30                        sub     al,    '0'              ; Convert ASCII to integer
    77 000000D6 486BC00A                    imul    rax,    rax,   10       ; Multiply current value by 10
    78 000000DA 4801F8                      add     rax,    rdi             ; Add value of current digit
    79 000000DD EBF0                        jmp     .loop                   ; Repeat for next digit
    80                                  .done:
    81 000000DF C3                          ret
    82                                  
    83                                  ; DATA SECTION
    84                                  section .bss
    85 00000000 <res 00000040>              num1            resb    64      ; Reserve space for first number
    86 00000040 <res 00000040>              num2            resb    64      ; Reserve space for second number
    87 00000080 <res 00000040>              result          resb    64      ; Reserve space for result
    88                                  
    89                                  section .data
    90 00000000 456E74657220466972-         prompt1         db  'Enter First Number: ', 0    ; String to be printed for first number
    90 00000009 7374204E756D626572-
    90 00000012 3A2000             
    91                                      prompt1_length  equ $ - prompt1                   ; Length of the string for first number
    92 00000015 456E74657220536563-         prompt2         db  'Enter Second Number: ', 0   ; String to be printed for second number
    92 0000001E 6F6E64204E756D6265-
    92 00000027 723A2000           
    93                                      prompt2_length  equ $ - prompt2                   ; Length of the string for second number
    94 0000002B 526573756C74206973-         result_msg      db  'Result is: ', 0             ; Result message
    94 00000034 3A2000             
    95                                      result_msg_len  equ $ - result_msg               ; Length of the result message
